CCS PCM C Compiler, Version 4.104, 5967               23-mar-24 23:24

               Filename: C:\Users\JOICE\OneDrive\Documentos\Faculdade\microcontrolador\atividades\lcd\lcd.lst

               ROM used: 828 words (10%)
                         Largest free fragment is 2048
               RAM used: 8 (2%) at main() level
                         20 (5%) worst case
               Stack:    4 locations

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2B5
0003:  NOP
.................... //#include "C:\Users\JOICE\OneDrive\Documentos\Faculdade\microcontrolador\atividades\lcd\lcd.h" 
....................  
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
....................  
....................  
....................  
.................... #use delay(clock=20000000) 
*
0026:  MOVLW  27
0027:  MOVWF  04
0028:  BCF    03.7
0029:  MOVF   00,W
002A:  BTFSC  03.2
002B:  GOTO   039
002C:  MOVLW  06
002D:  MOVWF  78
002E:  CLRF   77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  DECFSZ 78,F
0032:  GOTO   02E
0033:  MOVLW  7B
0034:  MOVWF  77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  DECFSZ 00,F
0038:  GOTO   02C
0039:  RETURN
....................  
.................... #ifndef lcd_enable 
....................  #define lcd_enable pin_E1 // pino enable do LCD 
....................  #define lcd_rs pin_E2 // pino rs do LCD 
....................  //#define lcd_rw pin_e2 // pino rw do LCD 
....................  #define lcd_d4 pin_d4 // pino de dados d4 do LCD 
....................  #define lcd_d5 pin_d5 // pino de dados d5 do LCD 
....................  #define lcd_d6 pin_d6 // pino de dados d6 do LCD 
....................  #define lcd_d7 pin_d7 // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #include "mod_lcd.c" 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipulação de módulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: Fábio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
....................  
.................... // As definições a seguir são utilizadas para acesso aos pinos do display 
.................... // caso o pino RW não seja utilizado, comente a definição lcd_rw 
.................... #ifndef lcd_enable 
.................... 	#define lcd_enable 		pin_e1		// pino enable do LCD 
.................... 	#define lcd_rs			pin_e0		// pino rs do LCD 
.................... 	//#define lcd_rw		pin_e2		// pino rw do LCD 
.................... 	#define lcd_d4			pin_d4		// pino de dados d4 do LCD 
.................... 	#define lcd_d5			pin_d5		// pino de dados d5 do LCD 
.................... 	#define lcd_d6			pin_d6		// pino de dados d6 do LCD 
.................... 	#define lcd_d7			pin_d7		// pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endereço da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seqüência de inicialização do módulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xf, 1, 6}; 
....................  
.................... byte lcd_le_byte() 
.................... // lê um byte do LCD (somente com pino RW) 
.................... { 
.................... 	byte dado; 
.................... 	// configura os pinos de dados como entradas 
.................... 	input(lcd_d4); 
.................... 	input(lcd_d5); 
.................... 	input(lcd_d6); 
.................... 	input(lcd_d7); 
.................... 	// se o pino rw for utilizado, coloca em 1 
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
....................    output_high(lcd_enable); // habilita display 
.................... 	dado = 0;	// zera a variável de leitura 
.................... 	// lê os quatro bits mais significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,7); 
.................... 	if (input(lcd_d6)) bit_set(dado,6); 
.................... 	if (input(lcd_d5)) bit_set(dado,5); 
.................... 	if (input(lcd_d4)) bit_set(dado,4); 
.................... 	// dá um pulso na linha enable 
.................... 	output_low(lcd_enable); 
.................... 	output_high(lcd_enable); 
.................... 	// lê os quatro bits menos significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,3); 
.................... 	if (input(lcd_d6)) bit_set(dado,2); 
.................... 	if (input(lcd_d5)) bit_set(dado,1); 
.................... 	if (input(lcd_d4)) bit_set(dado,0); 
.................... 	output_low(lcd_enable);	// desabilita o display 
.................... 	return dado;	// retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
.................... 	// coloca os quatro bits nas saidas 
.................... 	output_bit(lcd_d4,bit_test(dado,0)); 
003A:  BTFSC  2E.0
003B:  GOTO   03E
003C:  BCF    08.4
003D:  GOTO   03F
003E:  BSF    08.4
003F:  BSF    03.5
0040:  BCF    08.4
.................... 	output_bit(lcd_d5,bit_test(dado,1)); 
0041:  BCF    03.5
0042:  BTFSC  2E.1
0043:  GOTO   046
0044:  BCF    08.5
0045:  GOTO   047
0046:  BSF    08.5
0047:  BSF    03.5
0048:  BCF    08.5
.................... 	output_bit(lcd_d6,bit_test(dado,2)); 
0049:  BCF    03.5
004A:  BTFSC  2E.2
004B:  GOTO   04E
004C:  BCF    08.6
004D:  GOTO   04F
004E:  BSF    08.6
004F:  BSF    03.5
0050:  BCF    08.6
.................... 	output_bit(lcd_d7,bit_test(dado,3)); 
0051:  BCF    03.5
0052:  BTFSC  2E.3
0053:  GOTO   056
0054:  BCF    08.7
0055:  GOTO   057
0056:  BSF    08.7
0057:  BSF    03.5
0058:  BCF    08.7
.................... 	// dá um pulso na linha enable 
.................... 	output_high(lcd_enable); 
0059:  BCF    09.1
005A:  BCF    03.5
005B:  BSF    09.1
.................... 	output_low(lcd_enable); 
005C:  BSF    03.5
005D:  BCF    09.1
005E:  BCF    03.5
005F:  BCF    09.1
.................... } 
0060:  RETURN
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
.................... 	// coloca a linha rs em 0 
.................... 	output_low(lcd_rs); 
0061:  BSF    03.5
0062:  BCF    09.2
0063:  BCF    03.5
0064:  BCF    09.2
.................... 	// aguarda o display ficar desocupado 
.................... 	//while ( bit_test(lcd_le_byte(),7) ) ; 
.................... 	// configura a linha rs dependendo do modo selecionado 
.................... 	output_bit(lcd_rs,endereco); 
0065:  MOVF   2B,F
0066:  BTFSS  03.2
0067:  GOTO   06A
0068:  BCF    09.2
0069:  GOTO   06B
006A:  BSF    09.2
006B:  BSF    03.5
006C:  BCF    09.2
.................... 	delay_us(100);	// aguarda 100 us 
006D:  MOVLW  A6
006E:  MOVWF  77
006F:  DECFSZ 77,F
0070:  GOTO   06F
0071:  NOP
.................... 	// caso a linha rw esteja definida, coloca em 0 
.................... 	#ifdef lcd_rw 
.................... 		output_low(lcd_rw); 
.................... 	#endif 
.................... 	// desativa linha enable 
.................... 	output_low(lcd_enable); 
0072:  BCF    09.1
0073:  BCF    03.5
0074:  BCF    09.1
.................... 	// envia a primeira parte do byte 
.................... 	lcd_envia_nibble(dado >> 4); 
0075:  SWAPF  2C,W
0076:  MOVWF  2D
0077:  MOVLW  0F
0078:  ANDWF  2D,F
0079:  MOVF   2D,W
007A:  MOVWF  2E
007B:  CALL   03A
.................... 	// envia a segunda parte do byte 
.................... 	lcd_envia_nibble(dado & 0x0f); 
007C:  MOVF   2C,W
007D:  ANDLW  0F
007E:  MOVWF  2D
007F:  MOVWF  2E
0080:  CALL   03A
.................... } 
0081:  RETURN
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicialização do display 
.................... { 
.................... 	byte conta; 
.................... 	output_low(lcd_d4); 
0082:  BSF    03.5
0083:  BCF    08.4
0084:  BCF    03.5
0085:  BCF    08.4
.................... 	output_low(lcd_d5); 
0086:  BSF    03.5
0087:  BCF    08.5
0088:  BCF    03.5
0089:  BCF    08.5
.................... 	output_low(lcd_d6); 
008A:  BSF    03.5
008B:  BCF    08.6
008C:  BCF    03.5
008D:  BCF    08.6
.................... 	output_low(lcd_d7); 
008E:  BSF    03.5
008F:  BCF    08.7
0090:  BCF    03.5
0091:  BCF    08.7
.................... 	output_low(lcd_rs); 
0092:  BSF    03.5
0093:  BCF    09.2
0094:  BCF    03.5
0095:  BCF    09.2
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
.................... 	output_low(lcd_enable); 
0096:  BSF    03.5
0097:  BCF    09.1
0098:  BCF    03.5
0099:  BCF    09.1
.................... 	delay_ms(15); 
009A:  MOVLW  0F
009B:  MOVWF  27
009C:  CALL   026
.................... 	// envia uma seqüência de 3 vezes 0x03 
.................... 	// e depois 0x02 para configurar o módulo 
.................... 	// para modo de 4 bits 
.................... 	for(conta=1;conta<=3;++conta) 
009D:  MOVLW  01
009E:  MOVWF  22
009F:  MOVF   22,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AB
.................... 	{ 
.................... 		lcd_envia_nibble(3); 
00A3:  MOVLW  03
00A4:  MOVWF  2E
00A5:  CALL   03A
.................... 		delay_ms(5); 
00A6:  MOVLW  05
00A7:  MOVWF  27
00A8:  CALL   026
.................... 	} 
00A9:  INCF   22,F
00AA:  GOTO   09F
.................... 	lcd_envia_nibble(2); 
00AB:  MOVLW  02
00AC:  MOVWF  2E
00AD:  CALL   03A
.................... 	// envia string de inicialização do display 
.................... 	for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
00AE:  CLRF   22
00AF:  MOVF   22,W
00B0:  SUBLW  03
00B1:  BTFSS  03.0
00B2:  GOTO   0BC
00B3:  MOVF   22,W
00B4:  CALL   004
00B5:  MOVWF  23
00B6:  CLRF   2B
00B7:  MOVF   23,W
00B8:  MOVWF  2C
00B9:  CALL   061
00BA:  INCF   22,F
00BB:  GOTO   0AF
.................... } 
00BC:  BCF    0A.3
00BD:  BCF    0A.4
00BE:  GOTO   2FE (RETURN)
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
00D9:  DECFSZ 28,W
00DA:  GOTO   0DC
00DB:  GOTO   0DF
....................    	endereco = lcd_seg_lin; 
00DC:  MOVLW  40
00DD:  MOVWF  29
....................    else 
00DE:  GOTO   0E0
....................    	endereco = 0; 
00DF:  CLRF   29
....................    endereco += x-1; 
00E0:  MOVLW  01
00E1:  SUBWF  27,W
00E2:  ADDWF  29,F
....................    lcd_envia_byte(0,0x80|endereco); 
00E3:  MOVF   29,W
00E4:  IORLW  80
00E5:  MOVWF  2A
00E6:  CLRF   2B
00E7:  MOVF   2A,W
00E8:  MOVWF  2C
00E9:  CALL   061
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
.................... 	{ 
*
00BF:  MOVF   26,W
00C0:  XORLW  0C
00C1:  BTFSC  03.2
00C2:  GOTO   0CD
00C3:  XORLW  06
00C4:  BTFSC  03.2
00C5:  GOTO   0D5
00C6:  XORLW  07
00C7:  BTFSC  03.2
00C8:  GOTO   0D5
00C9:  XORLW  05
00CA:  BTFSC  03.2
00CB:  GOTO   0EB
00CC:  GOTO   0F0
....................      case '\f' 	:	lcd_envia_byte(0,1); 
00CD:  CLRF   2B
00CE:  MOVLW  01
00CF:  MOVWF  2C
00D0:  CALL   061
.................... 	  			delay_ms(2); 
00D1:  MOVLW  02
00D2:  MOVWF  27
00D3:  CALL   026
.................... 				break; 
00D4:  GOTO   0F6
....................      case '\n'	: 
.................... 	 case '\r' 	:	lcd_pos_xy(1,2); 
00D5:  MOVLW  01
00D6:  MOVWF  27
00D7:  MOVLW  02
00D8:  MOVWF  28
.................... 	  			break; 
*
00EA:  GOTO   0F6
....................      case '\b' 	:	lcd_envia_byte(0,0x10); 
00EB:  CLRF   2B
00EC:  MOVLW  10
00ED:  MOVWF  2C
00EE:  CALL   061
.................... 	  			break; 
00EF:  GOTO   0F6
....................      default	:	lcd_envia_byte(1,c); 
00F0:  MOVLW  01
00F1:  MOVWF  2B
00F2:  MOVF   26,W
00F3:  MOVWF  2C
00F4:  CALL   061
.................... 	  			break; 
00F5:  GOTO   0F6
....................    } 
.................... } 
00F6:  RETURN
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
.................... 	char valor; 
.................... 	// seleciona a posição do caractere 
.................... 	lcd_pos_xy(x,y); 
.................... 	// ativa rs 
.................... 	output_high(lcd_rs); 
.................... 	// lê o caractere 
.................... 	valor = lcd_le_byte(); 
.................... 	// desativa rs 
.................... 	output_low(lcd_rs); 
.................... 	// retorna o valor do caractere 
.................... 	return valor; 
.................... } 
....................  
....................  
.................... #include "kbd_ext_board2.c" 
.................... //#include "C:\Users\JOICE\OneDrive\Documentos\Faculdade\microcontrolador\atividades\kbd_ext_board2\kbd_ext_board2.h" 
....................  
....................  
....................  
.................... /*######################################################################  
....................  Rotina utilizaçãoo do teclado da placa PicSim board4 
....................  Adaptada para o compilador CCS 
....................  Autor: Alberto Willia Mascarenhas (adaptou para o compilador) 
....................  For e-mail suggestions : awmascarenhas@gmail.com 
.................... ######################################################################## */ 
....................  
.................... unsigned char tc_tecla(unsigned int timeout) 
.................... { 
*
013D:  CLRF   23
013E:  CLRF   24
....................  unsigned int to=0; 
....................  unsigned char k = 0;  
....................  while(((to < timeout)||(!timeout))&&(!k)){ 
013F:  MOVF   22,W
0140:  SUBWF  23,W
0141:  BTFSS  03.0
0142:  GOTO   146
0143:  MOVF   22,F
0144:  BTFSS  03.2
0145:  GOTO   25B
0146:  MOVF   24,F
0147:  BTFSS  03.2
0148:  GOTO   25B
....................   
....................   
....................  //------------------------------------------------------------------------- 
....................  //inicio do programa de varredura do teclado matricial 
....................  //-------------------------------------------------------------------------- 
....................  //habilita primeira coluna do teclado 
....................  output_low(PIN_B0);output_high(PIN_B1);output_high(PIN_B2);output_high(PIN_B3); 
0149:  BSF    03.5
014A:  BCF    06.0
014B:  BCF    03.5
014C:  BCF    06.0
014D:  BSF    03.5
014E:  BCF    06.1
014F:  BCF    03.5
0150:  BSF    06.1
0151:  BSF    03.5
0152:  BCF    06.2
0153:  BCF    03.5
0154:  BSF    06.2
0155:  BSF    03.5
0156:  BCF    06.3
0157:  BCF    03.5
0158:  BSF    06.3
....................  delay_ms(20); 
0159:  MOVLW  14
015A:  MOVWF  27
015B:  CALL   026
....................  if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='1';}; 
015C:  BSF    03.5
015D:  BSF    08.0
015E:  BCF    03.5
015F:  BTFSC  08.0
0160:  GOTO   168
0161:  BSF    03.5
0162:  BSF    08.0
0163:  BCF    03.5
0164:  BTFSS  08.0
0165:  GOTO   161
0166:  MOVLW  31
0167:  MOVWF  24
....................  if (input(PIN_D1) == 0){ 
0168:  BSF    03.5
0169:  BSF    08.1
016A:  BCF    03.5
016B:  BTFSC  08.1
016C:  GOTO   174
....................  while(input(PIN_D1) == 0); 
016D:  BSF    03.5
016E:  BSF    08.1
016F:  BCF    03.5
0170:  BTFSS  08.1
0171:  GOTO   16D
....................  k='4'; 
0172:  MOVLW  34
0173:  MOVWF  24
....................  }; 
....................  if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='7';}; 
0174:  BSF    03.5
0175:  BSF    08.2
0176:  BCF    03.5
0177:  BTFSC  08.2
0178:  GOTO   180
0179:  BSF    03.5
017A:  BSF    08.2
017B:  BCF    03.5
017C:  BTFSS  08.2
017D:  GOTO   179
017E:  MOVLW  37
017F:  MOVWF  24
....................  if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='*';}; 
0180:  BSF    03.5
0181:  BSF    08.3
0182:  BCF    03.5
0183:  BTFSC  08.3
0184:  GOTO   18C
0185:  BSF    03.5
0186:  BSF    08.3
0187:  BCF    03.5
0188:  BTFSS  08.3
0189:  GOTO   185
018A:  MOVLW  2A
018B:  MOVWF  24
....................  //habilita segunda coluna do teclado 
....................  output_high(PIN_B0);output_low(PIN_B1);output_high(PIN_B2);output_high(PIN_B3); 
018C:  BSF    03.5
018D:  BCF    06.0
018E:  BCF    03.5
018F:  BSF    06.0
0190:  BSF    03.5
0191:  BCF    06.1
0192:  BCF    03.5
0193:  BCF    06.1
0194:  BSF    03.5
0195:  BCF    06.2
0196:  BCF    03.5
0197:  BSF    06.2
0198:  BSF    03.5
0199:  BCF    06.3
019A:  BCF    03.5
019B:  BSF    06.3
....................  delay_ms(20);  
019C:  MOVLW  14
019D:  MOVWF  27
019E:  CALL   026
....................  if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='2';}; 
019F:  BSF    03.5
01A0:  BSF    08.0
01A1:  BCF    03.5
01A2:  BTFSC  08.0
01A3:  GOTO   1AB
01A4:  BSF    03.5
01A5:  BSF    08.0
01A6:  BCF    03.5
01A7:  BTFSS  08.0
01A8:  GOTO   1A4
01A9:  MOVLW  32
01AA:  MOVWF  24
....................  if (input(PIN_D1) == 0){while(input(PIN_D1) == 0);k='5';}; 
01AB:  BSF    03.5
01AC:  BSF    08.1
01AD:  BCF    03.5
01AE:  BTFSC  08.1
01AF:  GOTO   1B7
01B0:  BSF    03.5
01B1:  BSF    08.1
01B2:  BCF    03.5
01B3:  BTFSS  08.1
01B4:  GOTO   1B0
01B5:  MOVLW  35
01B6:  MOVWF  24
....................  if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='8';}; 
01B7:  BSF    03.5
01B8:  BSF    08.2
01B9:  BCF    03.5
01BA:  BTFSC  08.2
01BB:  GOTO   1C3
01BC:  BSF    03.5
01BD:  BSF    08.2
01BE:  BCF    03.5
01BF:  BTFSS  08.2
01C0:  GOTO   1BC
01C1:  MOVLW  38
01C2:  MOVWF  24
....................  if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='0';}; 
01C3:  BSF    03.5
01C4:  BSF    08.3
01C5:  BCF    03.5
01C6:  BTFSC  08.3
01C7:  GOTO   1CF
01C8:  BSF    03.5
01C9:  BSF    08.3
01CA:  BCF    03.5
01CB:  BTFSS  08.3
01CC:  GOTO   1C8
01CD:  MOVLW  30
01CE:  MOVWF  24
....................   
....................  //habilita terceira coluna do teclado 
....................  output_high(PIN_B0);output_high(PIN_B1);output_low(PIN_B2);output_high(PIN_B3); 
01CF:  BSF    03.5
01D0:  BCF    06.0
01D1:  BCF    03.5
01D2:  BSF    06.0
01D3:  BSF    03.5
01D4:  BCF    06.1
01D5:  BCF    03.5
01D6:  BSF    06.1
01D7:  BSF    03.5
01D8:  BCF    06.2
01D9:  BCF    03.5
01DA:  BCF    06.2
01DB:  BSF    03.5
01DC:  BCF    06.3
01DD:  BCF    03.5
01DE:  BSF    06.3
....................  delay_ms(20);  
01DF:  MOVLW  14
01E0:  MOVWF  27
01E1:  CALL   026
....................  if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='3';}; 
01E2:  BSF    03.5
01E3:  BSF    08.0
01E4:  BCF    03.5
01E5:  BTFSC  08.0
01E6:  GOTO   1EE
01E7:  BSF    03.5
01E8:  BSF    08.0
01E9:  BCF    03.5
01EA:  BTFSS  08.0
01EB:  GOTO   1E7
01EC:  MOVLW  33
01ED:  MOVWF  24
....................  if (input(PIN_D1) == 0){while(input(PIN_D1) == 0);k='6';}; 
01EE:  BSF    03.5
01EF:  BSF    08.1
01F0:  BCF    03.5
01F1:  BTFSC  08.1
01F2:  GOTO   1FA
01F3:  BSF    03.5
01F4:  BSF    08.1
01F5:  BCF    03.5
01F6:  BTFSS  08.1
01F7:  GOTO   1F3
01F8:  MOVLW  36
01F9:  MOVWF  24
....................  if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='9';}; 
01FA:  BSF    03.5
01FB:  BSF    08.2
01FC:  BCF    03.5
01FD:  BTFSC  08.2
01FE:  GOTO   206
01FF:  BSF    03.5
0200:  BSF    08.2
0201:  BCF    03.5
0202:  BTFSS  08.2
0203:  GOTO   1FF
0204:  MOVLW  39
0205:  MOVWF  24
....................  if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='#';}; 
0206:  BSF    03.5
0207:  BSF    08.3
0208:  BCF    03.5
0209:  BTFSC  08.3
020A:  GOTO   212
020B:  BSF    03.5
020C:  BSF    08.3
020D:  BCF    03.5
020E:  BTFSS  08.3
020F:  GOTO   20B
0210:  MOVLW  23
0211:  MOVWF  24
....................  //habilita quarta coluna do teclado 
....................  output_high(PIN_B0);output_high(PIN_B1);output_high(PIN_B2);output_low(PIN_B3); 
0212:  BSF    03.5
0213:  BCF    06.0
0214:  BCF    03.5
0215:  BSF    06.0
0216:  BSF    03.5
0217:  BCF    06.1
0218:  BCF    03.5
0219:  BSF    06.1
021A:  BSF    03.5
021B:  BCF    06.2
021C:  BCF    03.5
021D:  BSF    06.2
021E:  BSF    03.5
021F:  BCF    06.3
0220:  BCF    03.5
0221:  BCF    06.3
....................  delay_ms(20);  
0222:  MOVLW  14
0223:  MOVWF  27
0224:  CALL   026
....................  if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='A';}; 
0225:  BSF    03.5
0226:  BSF    08.0
0227:  BCF    03.5
0228:  BTFSC  08.0
0229:  GOTO   231
022A:  BSF    03.5
022B:  BSF    08.0
022C:  BCF    03.5
022D:  BTFSS  08.0
022E:  GOTO   22A
022F:  MOVLW  41
0230:  MOVWF  24
....................  if (input(PIN_D1) == 0){while(input(PIN_D1) == 0);k='B';}; 
0231:  BSF    03.5
0232:  BSF    08.1
0233:  BCF    03.5
0234:  BTFSC  08.1
0235:  GOTO   23D
0236:  BSF    03.5
0237:  BSF    08.1
0238:  BCF    03.5
0239:  BTFSS  08.1
023A:  GOTO   236
023B:  MOVLW  42
023C:  MOVWF  24
....................  if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='C';}; 
023D:  BSF    03.5
023E:  BSF    08.2
023F:  BCF    03.5
0240:  BTFSC  08.2
0241:  GOTO   249
0242:  BSF    03.5
0243:  BSF    08.2
0244:  BCF    03.5
0245:  BTFSS  08.2
0246:  GOTO   242
0247:  MOVLW  43
0248:  MOVWF  24
....................  if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='D';}; 
0249:  BSF    03.5
024A:  BSF    08.3
024B:  BCF    03.5
024C:  BTFSC  08.3
024D:  GOTO   255
024E:  BSF    03.5
024F:  BSF    08.3
0250:  BCF    03.5
0251:  BTFSS  08.3
0252:  GOTO   24E
0253:  MOVLW  44
0254:  MOVWF  24
....................   
....................  delay_ms(5); 
0255:  MOVLW  05
0256:  MOVWF  27
0257:  CALL   026
....................  to+=5; 
0258:  MOVLW  05
0259:  ADDWF  23,F
....................  } 
025A:  GOTO   13F
....................  if(!k)k=255; 
025B:  MOVF   24,F
025C:  BTFSS  03.2
025D:  GOTO   260
025E:  MOVLW  FF
025F:  MOVWF  24
....................  return k;  
0260:  MOVF   24,W
0261:  MOVWF  78
.................... } 
0262:  BCF    0A.3
0263:  BCF    0A.4
0264:  GOTO   320 (RETURN)
....................  
....................  
.................... void main() 
.................... { 
*
02B5:  CLRF   04
02B6:  BCF    03.7
02B7:  MOVLW  1F
02B8:  ANDWF  03,F
02B9:  BSF    03.5
02BA:  BSF    1F.0
02BB:  BSF    1F.1
02BC:  BSF    1F.2
02BD:  BCF    1F.3
02BE:  MOVLW  07
02BF:  MOVWF  1C
....................  unsigned char tmp; 
....................  setup_adc_ports(NO_ANALOGS); 
*
02C3:  BSF    03.5
02C4:  BSF    1F.0
02C5:  BSF    1F.1
02C6:  BSF    1F.2
02C7:  BCF    1F.3
....................  setup_adc(ADC_OFF); 
02C8:  BCF    03.5
02C9:  BCF    1F.0
....................  setup_psp(PSP_DISABLED); 
02CA:  BSF    03.5
02CB:  BCF    09.4
....................  setup_spi(SPI_SS_DISABLED); 
02CC:  BCF    03.5
02CD:  BCF    14.5
02CE:  BCF    20.5
02CF:  MOVF   20,W
02D0:  BSF    03.5
02D1:  MOVWF  07
02D2:  BCF    03.5
02D3:  BSF    20.4
02D4:  MOVF   20,W
02D5:  BSF    03.5
02D6:  MOVWF  07
02D7:  BCF    03.5
02D8:  BCF    20.3
02D9:  MOVF   20,W
02DA:  BSF    03.5
02DB:  MOVWF  07
02DC:  MOVLW  01
02DD:  BCF    03.5
02DE:  MOVWF  14
02DF:  MOVLW  00
02E0:  BSF    03.5
02E1:  MOVWF  14
....................  setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
02E2:  MOVF   01,W
02E3:  ANDLW  C7
02E4:  IORLW  08
02E5:  MOVWF  01
....................  setup_timer_1(T1_DISABLED); 
02E6:  BCF    03.5
02E7:  CLRF   10
....................  setup_timer_2(T2_DISABLED,0,1); 
02E8:  MOVLW  00
02E9:  MOVWF  78
02EA:  MOVWF  12
02EB:  MOVLW  00
02EC:  BSF    03.5
02ED:  MOVWF  12
....................  setup_comparator(NC_NC_NC_NC); 
02EE:  MOVLW  07
02EF:  MOVWF  1C
02F0:  MOVF   05,W
02F1:  MOVWF  05
02F2:  MOVLW  10
02F3:  MOVWF  77
02F4:  DECFSZ 77,F
02F5:  GOTO   2F4
02F6:  NOP
02F7:  MOVF   1C,W
02F8:  BCF    03.5
02F9:  BCF    0D.6
....................  setup_vref(FALSE); 
02FA:  BSF    03.5
02FB:  CLRF   1D
....................  lcd_ini(); // Inicializa LCD 
02FC:  BCF    03.5
02FD:  GOTO   082
....................  delay_ms(10); 
02FE:  MOVLW  0A
02FF:  MOVWF  27
0300:  CALL   026
....................  printf (lcd_escreve,"\fIFMT ... 2022"); 
0301:  MOVLW  0C
0302:  BSF    03.6
0303:  MOVWF  0D
0304:  MOVLW  00
0305:  MOVWF  0F
0306:  BCF    03.6
0307:  CALL   0F7
....................  delay_ms(1000); 
0308:  MOVLW  04
0309:  MOVWF  22
030A:  MOVLW  FA
030B:  MOVWF  27
030C:  CALL   026
030D:  DECFSZ 22,F
030E:  GOTO   30A
....................  printf (lcd_escreve,"\f TECLADO "); 
030F:  MOVLW  14
0310:  BSF    03.6
0311:  MOVWF  0D
0312:  MOVLW  00
0313:  MOVWF  0F
0314:  BCF    03.6
0315:  CALL   0F7
....................  delay_ms(2000); 
0316:  MOVLW  08
0317:  MOVWF  22
0318:  MOVLW  FA
0319:  MOVWF  27
031A:  CALL   026
031B:  DECFSZ 22,F
031C:  GOTO   318
....................  while (true) 
....................  { 
....................   
....................  //------------------------------------------- 
....................  tmp = tc_tecla(1500); // ms 
031D:  MOVLW  DC
031E:  MOVWF  22
031F:  GOTO   13D
0320:  MOVF   78,W
0321:  MOVWF  21
....................  //------------------------------------------- 
....................  if(tmp!=255){ 
0322:  INCFSZ 21,W
0323:  GOTO   325
0324:  GOTO   333
....................  printf (lcd_escreve,"\f Botton %c",tmp); 
0325:  MOVLW  1A
0326:  BSF    03.6
0327:  MOVWF  0D
0328:  MOVLW  00
0329:  MOVWF  0F
032A:  BCF    03.0
032B:  MOVLW  09
032C:  BCF    03.6
032D:  MOVWF  22
032E:  GOTO   265
032F:  MOVF   21,W
0330:  MOVWF  26
0331:  CALL   0BF
....................  } 
....................  else{ printf (lcd_escreve,"\f TECLADO L"); 
0332:  GOTO   33A
0333:  MOVLW  20
0334:  BSF    03.6
0335:  MOVWF  0D
0336:  MOVLW  00
0337:  MOVWF  0F
0338:  BCF    03.6
0339:  CALL   0F7
....................   
....................  } 
....................   
....................   
....................  } // laço infinito 
033A:  GOTO   31D
.................... } 
033B:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT

CCS PCM C Compiler, Version 4.104, 5967               02-abr-24 18:11

               Filename: C:\Users\JOICE\OneDrive\Documentos\Faculdade\microcontrolador\atividades\placaReceptor\placaReceptor.lst

               ROM used: 347 words (4%)
                         Largest free fragment is 2048
               RAM used: 7 (2%) at main() level
                         18 (5%) worst case
               Stack:    3 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0F3
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
....................  
.................... #use delay(clock=20000000) 
*
000C:  MOVLW  25
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   01F
0012:  MOVLW  06
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  7B
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 00,F
001E:  GOTO   012
001F:  RETURN
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #ifndef lcd_enable 
....................  #define lcd_enable pin_E1 // pino enable do LCD 
....................  #define lcd_rs pin_E2 // pino rs do LCD 
....................  //#define lcd_rw pin_e2 // pino rw do LCD 
....................  #define lcd_d4 pin_d4 // pino de dados d4 do LCD 
....................  #define lcd_d5 pin_d5 // pino de dados d5 do LCD 
....................  #define lcd_d6 pin_d6 // pino de dados d6 do LCD 
....................  #define lcd_d7 pin_d7 // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #include "mod_lcd.c" 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipulação de módulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: Fábio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
....................  
.................... // As definições a seguir são utilizadas para acesso aos pinos do display 
.................... // caso o pino RW não seja utilizado, comente a definição lcd_rw 
.................... #ifndef lcd_enable 
.................... 	#define lcd_enable 		pin_e1		// pino enable do LCD 
.................... 	#define lcd_rs			pin_e0		// pino rs do LCD 
.................... 	//#define lcd_rw		pin_e2		// pino rw do LCD 
.................... 	#define lcd_d4			pin_d4		// pino de dados d4 do LCD 
.................... 	#define lcd_d5			pin_d5		// pino de dados d5 do LCD 
.................... 	#define lcd_d6			pin_d6		// pino de dados d6 do LCD 
.................... 	#define lcd_d7			pin_d7		// pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endereço da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seqüência de inicialização do módulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xf, 1, 6}; 
....................  
.................... byte lcd_le_byte() 
.................... // lê um byte do LCD (somente com pino RW) 
.................... { 
.................... 	byte dado; 
.................... 	// configura os pinos de dados como entradas 
.................... 	input(lcd_d4); 
.................... 	input(lcd_d5); 
.................... 	input(lcd_d6); 
.................... 	input(lcd_d7); 
.................... 	// se o pino rw for utilizado, coloca em 1 
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
....................    output_high(lcd_enable); // habilita display 
.................... 	dado = 0;	// zera a variável de leitura 
.................... 	// lê os quatro bits mais significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,7); 
.................... 	if (input(lcd_d6)) bit_set(dado,6); 
.................... 	if (input(lcd_d5)) bit_set(dado,5); 
.................... 	if (input(lcd_d4)) bit_set(dado,4); 
.................... 	// dá um pulso na linha enable 
.................... 	output_low(lcd_enable); 
.................... 	output_high(lcd_enable); 
.................... 	// lê os quatro bits menos significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,3); 
.................... 	if (input(lcd_d6)) bit_set(dado,2); 
.................... 	if (input(lcd_d5)) bit_set(dado,1); 
.................... 	if (input(lcd_d4)) bit_set(dado,0); 
.................... 	output_low(lcd_enable);	// desabilita o display 
.................... 	return dado;	// retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
.................... 	// coloca os quatro bits nas saidas 
.................... 	output_bit(lcd_d4,bit_test(dado,0)); 
0020:  BTFSC  2C.0
0021:  GOTO   024
0022:  BCF    08.4
0023:  GOTO   025
0024:  BSF    08.4
0025:  BSF    03.5
0026:  BCF    08.4
.................... 	output_bit(lcd_d5,bit_test(dado,1)); 
0027:  BCF    03.5
0028:  BTFSC  2C.1
0029:  GOTO   02C
002A:  BCF    08.5
002B:  GOTO   02D
002C:  BSF    08.5
002D:  BSF    03.5
002E:  BCF    08.5
.................... 	output_bit(lcd_d6,bit_test(dado,2)); 
002F:  BCF    03.5
0030:  BTFSC  2C.2
0031:  GOTO   034
0032:  BCF    08.6
0033:  GOTO   035
0034:  BSF    08.6
0035:  BSF    03.5
0036:  BCF    08.6
.................... 	output_bit(lcd_d7,bit_test(dado,3)); 
0037:  BCF    03.5
0038:  BTFSC  2C.3
0039:  GOTO   03C
003A:  BCF    08.7
003B:  GOTO   03D
003C:  BSF    08.7
003D:  BSF    03.5
003E:  BCF    08.7
.................... 	// dá um pulso na linha enable 
.................... 	output_high(lcd_enable); 
003F:  BCF    09.1
0040:  BCF    03.5
0041:  BSF    09.1
.................... 	output_low(lcd_enable); 
0042:  BSF    03.5
0043:  BCF    09.1
0044:  BCF    03.5
0045:  BCF    09.1
.................... } 
0046:  RETURN
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
.................... 	// coloca a linha rs em 0 
.................... 	output_low(lcd_rs); 
0047:  BSF    03.5
0048:  BCF    09.2
0049:  BCF    03.5
004A:  BCF    09.2
.................... 	// aguarda o display ficar desocupado 
.................... 	//while ( bit_test(lcd_le_byte(),7) ) ; 
.................... 	// configura a linha rs dependendo do modo selecionado 
.................... 	output_bit(lcd_rs,endereco); 
004B:  MOVF   29,F
004C:  BTFSS  03.2
004D:  GOTO   050
004E:  BCF    09.2
004F:  GOTO   051
0050:  BSF    09.2
0051:  BSF    03.5
0052:  BCF    09.2
.................... 	delay_us(100);	// aguarda 100 us 
0053:  MOVLW  A6
0054:  MOVWF  77
0055:  DECFSZ 77,F
0056:  GOTO   055
0057:  NOP
.................... 	// caso a linha rw esteja definida, coloca em 0 
.................... 	#ifdef lcd_rw 
.................... 		output_low(lcd_rw); 
.................... 	#endif 
.................... 	// desativa linha enable 
.................... 	output_low(lcd_enable); 
0058:  BCF    09.1
0059:  BCF    03.5
005A:  BCF    09.1
.................... 	// envia a primeira parte do byte 
.................... 	lcd_envia_nibble(dado >> 4); 
005B:  SWAPF  2A,W
005C:  MOVWF  2B
005D:  MOVLW  0F
005E:  ANDWF  2B,F
005F:  MOVF   2B,W
0060:  MOVWF  2C
0061:  CALL   020
.................... 	// envia a segunda parte do byte 
.................... 	lcd_envia_nibble(dado & 0x0f); 
0062:  MOVF   2A,W
0063:  ANDLW  0F
0064:  MOVWF  2B
0065:  MOVWF  2C
0066:  CALL   020
.................... } 
0067:  RETURN
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicialização do display 
.................... { 
.................... 	byte conta; 
.................... 	output_low(lcd_d4); 
0068:  BSF    03.5
0069:  BCF    08.4
006A:  BCF    03.5
006B:  BCF    08.4
.................... 	output_low(lcd_d5); 
006C:  BSF    03.5
006D:  BCF    08.5
006E:  BCF    03.5
006F:  BCF    08.5
.................... 	output_low(lcd_d6); 
0070:  BSF    03.5
0071:  BCF    08.6
0072:  BCF    03.5
0073:  BCF    08.6
.................... 	output_low(lcd_d7); 
0074:  BSF    03.5
0075:  BCF    08.7
0076:  BCF    03.5
0077:  BCF    08.7
.................... 	output_low(lcd_rs); 
0078:  BSF    03.5
0079:  BCF    09.2
007A:  BCF    03.5
007B:  BCF    09.2
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
.................... 	output_low(lcd_enable); 
007C:  BSF    03.5
007D:  BCF    09.1
007E:  BCF    03.5
007F:  BCF    09.1
.................... 	delay_ms(15); 
0080:  MOVLW  0F
0081:  MOVWF  25
0082:  CALL   00C
.................... 	// envia uma seqüência de 3 vezes 0x03 
.................... 	// e depois 0x02 para configurar o módulo 
.................... 	// para modo de 4 bits 
.................... 	for(conta=1;conta<=3;++conta) 
0083:  MOVLW  01
0084:  MOVWF  22
0085:  MOVF   22,W
0086:  SUBLW  03
0087:  BTFSS  03.0
0088:  GOTO   091
.................... 	{ 
.................... 		lcd_envia_nibble(3); 
0089:  MOVLW  03
008A:  MOVWF  2C
008B:  CALL   020
.................... 		delay_ms(5); 
008C:  MOVLW  05
008D:  MOVWF  25
008E:  CALL   00C
.................... 	} 
008F:  INCF   22,F
0090:  GOTO   085
.................... 	lcd_envia_nibble(2); 
0091:  MOVLW  02
0092:  MOVWF  2C
0093:  CALL   020
.................... 	// envia string de inicialização do display 
.................... 	for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
0094:  CLRF   22
0095:  MOVF   22,W
0096:  SUBLW  03
0097:  BTFSS  03.0
0098:  GOTO   0A2
0099:  MOVF   22,W
009A:  CALL   004
009B:  MOVWF  23
009C:  CLRF   29
009D:  MOVF   23,W
009E:  MOVWF  2A
009F:  CALL   047
00A0:  INCF   22,F
00A1:  GOTO   095
.................... } 
00A2:  BCF    0A.3
00A3:  BCF    0A.4
00A4:  GOTO   14A (RETURN)
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
00CA:  DECFSZ 26,W
00CB:  GOTO   0CD
00CC:  GOTO   0D0
....................    	endereco = lcd_seg_lin; 
00CD:  MOVLW  40
00CE:  MOVWF  27
....................    else 
00CF:  GOTO   0D1
....................    	endereco = 0; 
00D0:  CLRF   27
....................    endereco += x-1; 
00D1:  MOVLW  01
00D2:  SUBWF  25,W
00D3:  ADDWF  27,F
....................    lcd_envia_byte(0,0x80|endereco); 
00D4:  MOVF   27,W
00D5:  IORLW  80
00D6:  MOVWF  28
00D7:  CLRF   29
00D8:  MOVF   28,W
00D9:  MOVWF  2A
00DA:  CALL   047
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
.................... 	{ 
*
00B0:  MOVF   24,W
00B1:  XORLW  0C
00B2:  BTFSC  03.2
00B3:  GOTO   0BE
00B4:  XORLW  06
00B5:  BTFSC  03.2
00B6:  GOTO   0C6
00B7:  XORLW  07
00B8:  BTFSC  03.2
00B9:  GOTO   0C6
00BA:  XORLW  05
00BB:  BTFSC  03.2
00BC:  GOTO   0DC
00BD:  GOTO   0E1
....................      case '\f' 	:	lcd_envia_byte(0,1); 
00BE:  CLRF   29
00BF:  MOVLW  01
00C0:  MOVWF  2A
00C1:  CALL   047
.................... 	  			delay_ms(2); 
00C2:  MOVLW  02
00C3:  MOVWF  25
00C4:  CALL   00C
.................... 				break; 
00C5:  GOTO   0E7
....................      case '\n'	: 
.................... 	 case '\r' 	:	lcd_pos_xy(1,2); 
00C6:  MOVLW  01
00C7:  MOVWF  25
00C8:  MOVLW  02
00C9:  MOVWF  26
.................... 	  			break; 
*
00DB:  GOTO   0E7
....................      case '\b' 	:	lcd_envia_byte(0,0x10); 
00DC:  CLRF   29
00DD:  MOVLW  10
00DE:  MOVWF  2A
00DF:  CALL   047
.................... 	  			break; 
00E0:  GOTO   0E7
....................      default	:	lcd_envia_byte(1,c); 
00E1:  MOVLW  01
00E2:  MOVWF  29
00E3:  MOVF   24,W
00E4:  MOVWF  2A
00E5:  CALL   047
.................... 	  			break; 
00E6:  GOTO   0E7
....................    } 
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
.................... 	char valor; 
.................... 	// seleciona a posição do caractere 
.................... 	lcd_pos_xy(x,y); 
.................... 	// ativa rs 
.................... 	output_high(lcd_rs); 
.................... 	// lê o caractere 
.................... 	valor = lcd_le_byte(); 
.................... 	// desativa rs 
.................... 	output_low(lcd_rs); 
.................... 	// retorna o valor do caractere 
.................... 	return valor; 
.................... } 
....................  
....................  
.................... void main() { 
*
00F3:  CLRF   04
00F4:  BCF    03.7
00F5:  MOVLW  1F
00F6:  ANDWF  03,F
00F7:  MOVLW  81
00F8:  BSF    03.5
00F9:  MOVWF  19
00FA:  MOVLW  A6
00FB:  MOVWF  18
00FC:  MOVLW  90
00FD:  BCF    03.5
00FE:  MOVWF  18
00FF:  BSF    03.5
0100:  BSF    1F.0
0101:  BSF    1F.1
0102:  BSF    1F.2
0103:  BCF    1F.3
0104:  MOVLW  07
0105:  MOVWF  1C
....................    int received_char; 
....................  
....................    setup_adc_ports(NO_ANALOGS); 
*
0109:  BSF    03.5
010A:  BSF    1F.0
010B:  BSF    1F.1
010C:  BSF    1F.2
010D:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
010E:  BCF    1F.6
010F:  BCF    03.5
0110:  BCF    1F.6
0111:  BCF    1F.7
0112:  BSF    03.5
0113:  BCF    1F.7
0114:  BCF    03.5
0115:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0116:  BSF    03.5
0117:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
0118:  BCF    03.5
0119:  BCF    14.5
011A:  BCF    20.5
011B:  MOVF   20,W
011C:  BSF    03.5
011D:  MOVWF  07
011E:  BCF    03.5
011F:  BSF    20.4
0120:  MOVF   20,W
0121:  BSF    03.5
0122:  MOVWF  07
0123:  BCF    03.5
0124:  BCF    20.3
0125:  MOVF   20,W
0126:  BSF    03.5
0127:  MOVWF  07
0128:  MOVLW  01
0129:  BCF    03.5
012A:  MOVWF  14
012B:  MOVLW  00
012C:  BSF    03.5
012D:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
012E:  MOVF   01,W
012F:  ANDLW  C7
0130:  IORLW  08
0131:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
0132:  BCF    03.5
0133:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0134:  MOVLW  00
0135:  MOVWF  78
0136:  MOVWF  12
0137:  MOVLW  00
0138:  BSF    03.5
0139:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
013A:  MOVLW  07
013B:  MOVWF  1C
013C:  MOVF   05,W
013D:  MOVWF  05
013E:  MOVLW  10
013F:  MOVWF  77
0140:  DECFSZ 77,F
0141:  GOTO   140
0142:  NOP
0143:  MOVF   1C,W
0144:  BCF    03.5
0145:  BCF    0D.6
....................    setup_vref(FALSE); 
0146:  BSF    03.5
0147:  CLRF   1D
....................     
....................    lcd_ini(); 
0148:  BCF    03.5
0149:  GOTO   068
....................     
....................    while (true) { 
....................        
....................          received_char = getc(); // Lê o caractere recebido 
014A:  BTFSS  0C.5
014B:  GOTO   14A
014C:  MOVF   1A,W
014D:  MOVWF  21
....................          printf(lcd_escreve, received_char); 
014E:  MOVF   21,W
014F:  MOVWF  04
0150:  BCF    03.7
0151:  BTFSC  22.0
0152:  BSF    03.7
0153:  GOTO   0A5
....................          output_toggle(PIN_D0); 
0154:  BSF    03.5
0155:  BCF    08.0
0156:  MOVLW  01
0157:  BCF    03.5
0158:  XORWF  08,F
....................   
....................    } 
0159:  GOTO   14A
.................... } 
....................  
015A:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
